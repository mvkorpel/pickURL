% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pick_urls.R
\name{pick_urls}
\alias{pick_urls}
\title{Extract URLs and email addresses from text}
\usage{
pick_urls(x, plain_email = all_email, single_item = FALSE,
  all_email = FALSE, collapse_x = FALSE, mailto_alias = c("email",
  "e-mail"), scheme_sub = list(mailto = mailto_alias),
  url_pattern = "^(https?|ftp)://.", email_pattern = "@[^.[]+\\\\.[^.]+",
  need_scheme = missing(url_pattern) || !isTRUE(nzchar(url_pattern)),
  deobfuscate = TRUE, rm_endpunct = 20)
}
\arguments{
\item{x}{a \code{character} vector containing the input text.}

\item{plain_email}{a \code{logical} flag. If \code{TRUE}, the
function also looks for plain email addresses (i.e. not formatted
as a mailto \acronym{URL}). The default is to use the same
value as for \code{all_email} (\code{FALSE}).}

\item{single_item}{a \code{logical} flag. If \code{TRUE}, the
function looks for a single \acronym{URL} or email address per
string instead of splitting each string into multiple potential
\acronym{URL}s or email addresses. The default is
\code{FALSE}. This setting interacts with \code{collapse_x}. See
\sQuote{Details}.}

\item{all_email}{a \code{logical} flag. If \code{TRUE}, individual
email addresses are also picked up from mailto (or alias)
\acronym{URL}s, and the remaining empty mailto \acronym{URL}s are
discarded. This effectively forces \code{plain_email} to
\code{TRUE}. If \code{FALSE} (the default), each mailto
\acronym{URL} (possibly with multiple email addresses) is returned
if \code{url_pattern} fits.}

\item{collapse_x}{a \code{logical} flag. If \code{TRUE}, selected
input strings are concatenated, separated by newline
characters. This allows \acronym{URL}s in angle brackets and plain
email addresses to extend across multiple strings. The default is
\code{FALSE}: don't look across string boundaries.}

\item{mailto_alias}{a \code{character} vector or
\code{NULL}. Synonyms for mailto \acronym{URI} scheme. These are
case insensitive and must follow the requirements for a
\acronym{URI} scheme name: starts with an \acronym{ASCII} letter
and is optionally followed by a sequence of letters, digits or
characters in the set \code{"."}, \code{"+"}, \code{"-"}.}

\item{scheme_sub}{a \code{list} of \acronym{URI} scheme
substitutions to be made. The default is to substitute
\code{"mailto"} for \code{"e-mail"} or \code{"email"} (copied from
\code{mailto_alias}). Each element of the list corresponds to one
official form, stored in the name of the element. The element is a
\code{character} vector holding the unofficial forms. The strings
are case-insensitive. Use \code{NULL} or an empty list for no
substitutions.}

\item{url_pattern}{a \code{character} string or \code{NULL}. Only
strings matching this Perl-like regular expression are
returned. This is not applied to plain email addresses (see
\code{plain_email} and \code{email_pattern}). The matching is
performed after all other processing. See \sQuote{Details}. If
\code{NULL} or otherwise of zero \code{length}, no matching is
done.}

\item{email_pattern}{a \code{character} string or \code{NULL}. Like
\code{url_pattern} but applied to email addresses.}

\item{need_scheme}{a \code{logical} flag. If \code{TRUE}, return
only strings starting with a technically valid, but not necessarily
existing \acronym{URI} scheme followed by a \code{":"} (see
\code{plain_email}). The default is \code{TRUE} if
\code{url_pattern} is \code{\link{missing}} or empty, \code{FALSE}
otherwise.}

\item{deobfuscate}{a \code{logical} flag. If \code{TRUE} (the
default), the function interprets some substrings with an
\code{"at"} word (case insensitive) as email addresses. The actual
pattern to match is more complicated, and false positives should be
rare.}

\item{rm_endpunct}{a \code{logical} flag or a \code{numeric} value
with integral or infinite value. If \code{TRUE}, removes any
\code{"."}, \code{"?"} or \code{"!"} that is suspected to end a
sentence. Useful when no space has been used to separate the end
punctuation from a \acronym{URL}. If \code{FALSE}, punctuation is
not removed. A \code{numeric} value indicates the memory size,
i.e. the maximum number of items (lines) across which a sentence
may extend. A smaller number means faster operation. Numbers
smaller than \code{1} are equivalent to \code{FALSE}, and
\code{Inf} is equivalent to \code{TRUE}. The default is \code{20}.}
}
\value{
If \code{plain_email} is \code{FALSE}, returns a
\code{character} vector containing the \acronym{URL}s in
\code{x}. \acronym{URL} schemes are converted to lowercase, which
is the canonical form.

If \code{plain_email} is \code{TRUE}, returns a \code{list} where
the first element \code{"url"} is the \acronym{URL} vector
described above and the second element \code{"email"} is a
\code{character} vector with the email addresses found. See
\code{all_email}.

If non-ASCII results are present, their \code{\link{Encoding}} will
be "UTF-8".
}
\description{
\code{pick_urls} extracts individual \acronym{URL}s and email
addresses from the input text. The function recognizes comma and
whitespace as characters separating individual \acronym{URL}s, as
is the specification of the \acronym{URL} field in the DESCRIPTION
file of \R packages (R Core Team, 2017). See \sQuote{Commas and
Whitespace} for details.
}
\section{Details}{


Compatibility with the Internationalized Resource Identifier (IRI)
specification (Duerst and Suignard, 2005) has not been assessed
carefully. However, the function will accept non-ASCII characters
(as opposed to splitting the string).

Invalid UTF-8 strings are handled by keeping the valid (ASCII)
bytes and discarding the rest. This means that URLs can still be
picked up from a \code{"latin1"} encoded string falsely marked as
having a \code{"UTF-8"} \code{\link{Encoding}} or when such a
string has an \code{"unknown"} encoding in a UTF-8 locale.

The function can remove delimiting brackets, some other punctuation
or simple LaTeX markup around \acronym{URL}s.

Note that the function looks for matching delimiting brackets
across input string boundaries when \code{single_item} is
\code{FALSE}. Also \code{rm_endpunct} works across
strings. Therefore it may be best that strings originating from
different input files or otherwise non-consecutive input lines are
processed separately, with multiple calls to this function. See
\code{collapse_x}.

The default \code{url_pattern} means that the \acronym{URI} scheme
must be http, https or ftp and that the scheme must be followed by
\code{"://"} and at least one character, indicating the presence of
an authority component. See \code{\link{regex}}. For example,
setting \code{url_pattern} to \code{"^mailto:."} would allow email
\acronym{URL}s to be returned.

The default \code{email_pattern} requires that the domain portion
after \code{"@"} has at least two parts separated by a
\code{"."}. This rules out addresses such as
\code{"root@localhost"} and avoids some false positives. Also
email addresses with a literal IP domain are dropped when the
domain is in square brackets.

When \code{single_item} is \code{TRUE}, no more than one item is
extracted from each input string. If also \code{collapse_x} is
\code{TRUE}, then no more than one item is extracted from each
group of concatenated input items. The function looks for a
\acronym{URL} scheme and a following \code{":"}. In case of no
match, the first substring looking like an email address is
selected if \code{plain_email} is \code{TRUE}. A \acronym{URL}
between double quotes (\code{"\""}) or angle brackets (\code{"<"}
and \code{">"}) takes precedence over a \acronym{URL} without such
delimiters. A \acronym{URL} may be rejected by the filtering stage
(see \code{url_pattern}), in which case it does not matter if an
email address was also found: no results are returned for the input
string in question.

\subsection{Commas and Whitespace}{

The comma is a problematic \acronym{URL} separator, because it is a
valid character in some parts of a \acronym{URL} (Berners-Lee,
Fielding, and Masinter, 2005). The function estimates which commas
should remain as part of a \acronym{URL}. Misclassifications are
possible.

Text between a pair of double quotes or angle brackets
(\acronym{URL} scheme required after the opening delimiter) is
mostly interpreted as representing a single \acronym{URL}, but
commas are still checked, and the \acronym{URL} is cut when
necessary. It is possible to use multiple lines (but not multiple
strings unless \code{collapse_x} is \code{TRUE}) for a long
\acronym{URL} when delimited by \code{"<"} and \code{">"}:
whitespace is removed when it occurs after the \code{":"} that
follows the \acronym{URL} scheme.

Whitespace, i.e. tabs and spaces, and commas are allowed in plain
email addresses: in a double quoted local part, or in a domain
literal delimited by square brackets (Resnick, 2008). These are
accepted by the function.

}
}

\examples{

email1 <- "user1@example.org"
urls <- c("http://www.example.org/",
          "ftp://cran.r-project.org",
          "https://a,b,c@[vf.a1,b2]/foo,bar",
          paste0("mailto:", email1))
phrase <- c(paste0("See ", urls[1], ", ", urls[2], " and"),
            paste0(urls[3], "."))
url_urls <- paste0("With prefix URL:", urls, " and that's all.")
comma_urls <- paste0(urls, collapse=",")
angle_urls <- sub(".", ".\\n", paste0("<", urls, ">"), fixed=TRUE)
split_urls <- unlist(strsplit(angle_urls, "\\n", fixed=TRUE))

pu1 <- pick_urls(urls)
identical(pu1, urls[1:3])                       # TRUE
pu2 <- pick_urls(urls, url_pattern="")
identical(pu2, urls)                            # TRUE
pu3 <- pick_urls(phrase)
identical(pu3, pu1)                             # TRUE
pu4 <- pick_urls(url_urls, url_pattern="")
identical(pu4, urls)                            # TRUE
pu5 <- pick_urls(urls, url_pattern="", all_email=TRUE)
identical(pu5[["url"]], urls[1:3])              # TRUE
identical(pu5[["email"]], email1)               # TRUE
pu6 <- pick_urls(comma_urls, url_pattern="")
identical(pu6, urls)                            # TRUE
pu7 <- pick_urls(angle_urls, url_pattern="")
identical(pu7, urls)                            # TRUE
pu8 <- pick_urls(split_urls, url_pattern="", collapse_x=TRUE)
identical(pu8, urls)                            # TRUE

emails <- c("user2 at example.org",
            "\\"user 3\\"(comment) @ localhost",
            "\\"user", " 4\\"@[::", " 1]")
emails_target <- c("user2@example.org",
                   "\\"user 3\\"@localhost",
                   "\\"user 4\\"@[::1]")

pe1 <- pick_urls(emails, plain_email=TRUE)
identical(pe1[["email"]], emails_target[1])     # TRUE
pe2 <- pick_urls(emails, plain_email=TRUE, email_pattern="")
identical(pe2[["email"]], emails_target[1:2])   # TRUE
pe3 <- pick_urls(emails, plain_email=TRUE, email_pattern="",
                 collapse_x=TRUE)
identical(pe3[["email"]], emails_target)        # TRUE
pe4 <- pick_urls(emails, plain_email=TRUE, email_pattern="",
                 deobfuscate=FALSE)
identical(pe4[["email"]], emails_target[2])     # TRUE

}
\references{
Berners-Lee, T., Fielding, R., and Masinter, L. (2005) Uniform
Resource Identifier (URI): Generic syntax. RFC 3986, RFC Editor.
\url{https://www.rfc-editor.org/rfc/rfc3986.txt}.

Braden, R., editor (1989) Requirements for Internet hosts -
application and support. RFC 1123, RFC Editor.
\url{https://www.rfc-editor.org/rfc/rfc1123.txt}.

Duerst, M., Masinter, L., and Zawinski, J. (2010) The 'mailto' URI
scheme. RFC 6068, RFC Editor.
\url{https://www.rfc-editor.org/rfc/rfc6068.txt}.

Duerst, M. and Suignard, M. (2005) Internationalized Resource
Identifiers (IRIs). RFC 3987, RFC
Editor. \url{https://www.rfc-editor.org/rfc/rfc3987.txt}.

Elz, R. and Bush, R. (1997) Clarifications to the DNS
specification. RFC 2181, RFC Editor.
\url{https://www.rfc-editor.org/rfc/rfc2181.txt}.

Harrenstien, K., Stahl, M., and Feinler, E. (1985) DoD Internet
host table specification. RFC 952, RFC Editor.
\url{https://www.rfc-editor.org/rfc/rfc952.txt}.

Mockapetris, P. (1987) Domain names - concepts and facilities. RFC
1034, RFC Editor.
\url{https://www.rfc-editor.org/rfc/rfc1034.txt}.

R Core Team (2017) R: A language and environment for statistical
computing. R Foundation for Statistical Computing, Vienna, Austria.
\url{https://www.R-project.org/}.

Resnick, P., editor (2008) Internet Message Format. RFC 5322, RFC
Editor.  \url{https://www.rfc-editor.org/rfc/rfc5322.txt}.
}
\keyword{utilities}
